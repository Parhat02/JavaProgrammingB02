Topics: Collections Continue
				- Queue
				- Iterable

package name: day40_collections


Collection (I): size is dynamic, supports non-primitives ONLY

		1. List (I): Has Index Number, Allows Duplicate

				1.1 ArrayList: Array based class
							   Accessing/searching the elements are faster

				1.2 LinkedList: Node based class (doubly linked list)
								Insertion & deletion of elements are faster

				1.3 Vector: Same as ArrayList but synchronized
							Is Synchronized ==> Thread-safety

				1.3.1 Stack: Same as ArrayList but synchronized
							Last-In-First-Out (LIFO) ===> pop()

							 pop(): returns & removes the last inserted object from the Stack


		2. Set (I): Does not have index number, Does not allow duplcaites

				2.1 HashSet (C): Order is random, aceespts null

				2.1.1 LinkedHashSet (C): Keeps the insertion order, accepts null

				2.2 TreeSet (C): keeps the sorted order, does not accept null


		3. Queue (I): Does not have index number, Allow duplicates. FIFO

					poll(): returns & removes the first inserted object from the Queue

				3.1 PriorityQueue (C): order is random, does not accept null

				3.2 ArrayDequeue (C): keeps the insertion order, does not accept null

				3.3 LinkedList (C): keeps the insertion order, accepts null, Has index number